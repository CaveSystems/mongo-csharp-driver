# .NET Cave Build Script
# Set Major Build Version in variables
# before merging next to master, branch to new release version vX

# trigger: add any branches with releases to build AND change fixedBuildVersion variable!
trigger:
- cave-release
- refs/tags/x*

pool:
  vmImage: 'windows-latest'

variables:
  solution: 'cave-signed-mongo-csharp-driver.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  isTagged: false

steps:

- task: Bash@3
  name: ShowEnvironment
  displayName: Display all environment variables
  inputs:
    targetType: 'inline'
    script: 'env | sort'
    
- task: PowerShell@2
  name: SetGitVars
  displayName: Set git variables
  env:
    BUILD_BUILDNUMBER: $(Build.BuildNumber)
    BUILD_SOURCEBRANCHNAME: $(Build.SourceBranchName)
  inputs:
    targetType: inline
    script: |
      $gitTag = "$(git describe --tags --always)".Trim()
      echo "branch = $env:BUILD_SOURCEBRANCHNAME"
      echo "git tag = '$gitTag'"
      if ($gitTag.StartsWith('v') || $gitTag.StartsWith('x'))
      {
        $version = $gitTag.TrimStart('v', 'x', 'V', 'X')
      }
      else
      {
        $fixedVersion = $(Get-Content GitVersion.yml -First 1).Split(':', 2)[1].Trim()        
        echo "fixed version = '$fixedVersion'"
        $version = $fixedVersion + "-" + $env:BUILD_BUILDNUMBER
      }
      echo "build version = '$version'"
      Write-Host "##vso[task.setvariable variable=version]$version"

- task: NuGetToolInstaller@0
  inputs:
    versionSpec: '>=4.9.0'

- task: NuGetCommand@2
  displayName: Restore nuget packages
  inputs:
    restoreSolution: '$(solution)'

- task: VSBuild@1
  displayName: Build solution
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

#- task: VSTest@2
#  inputs:
#    platform: '$(buildPlatform)'
#    configuration: '$(buildConfiguration)'
#    testAssemblyVer2: |
#      tests/**/bin/Release/**/MongoDB.*.Tests.dll
#      tests/**/bin/Release/**/MongoDB.*.Examples.dll

- task: NuGetCommand@2
  displayName: Push to nuget (release)
  condition: true
  inputs:
    command: push
    packagesToPush: '$(Build.SourcesDirectory)/src/**/bin/Release/*.nupkg'
    nuGetFeedType: external
    publishFeedCredentials: 'nuget-default'
    includeSymbols: true
